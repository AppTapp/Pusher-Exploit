struct hImg3
{
	unsigned int magic;
	unsigned int size;
	unsigned int imageSize;
	unsigned int shshOffset;
	unsigned int name;
};

struct hImg3Element
{
	unsigned int magic;
	unsigned int size;
	unsigned int dataSize;
};

struct hKernel
{
  unsigned int magic;
  unsigned int compress_type;
  unsigned int adler32;
  unsigned int uncompressed_size;
  unsigned int compressed_size;
  unsigned int reserved[11];
  char platform_name[64];
  char root_path[256];
  unsigned char data[0];
};

typedef struct hImg3 hImg3;
typedef struct hImg3Element hImg3Element;
typedef struct hKernel hKernel;

struct Img3Element
{
	hImg3Element header;
	unsigned char* data;
	void* nextElement;
};

typedef struct Img3Element Img3Element;

typedef enum
{
	kvUndefined = 0,
	kv202 = 1,
	kv210 = 2,
	kv220 = 3,
	kv221 = 4
} KernelVersion;
	
int patch(const char* filename, const char* output);
Img3Element* getDataElement(Img3Element* pElement);
unsigned int getElementsSize(Img3Element* pElement);
unsigned int getSHSHOffset(Img3Element* pElement);
Img3Element* removeElement(Img3Element* pElement, unsigned int magic);
void freeElements(Img3Element* pElement);

void aes_decrypt(void* p, unsigned int size, const char* key, const char* iv);
void aes_encrypt(void* p, unsigned int size, const char* key, const char* iv);
void sha1(void* p, unsigned int size, char** buf);
void convert_hex(const char* str, unsigned char* bytes, int len);

unsigned int swap32(unsigned int x);
unsigned short swap16(unsigned short x);
unsigned int endian_swap(unsigned int x);
unsigned short endian_swap16(unsigned short x);
