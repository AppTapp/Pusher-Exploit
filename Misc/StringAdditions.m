/*!
 @source StringAdditions.m
 @project Pusher
 @author Alexander Maksimenko
 @copyright Copyright (c) 2009 Ripdev. All rights reserved.
 */

#import "SupportClasses.h"
#import "StringAdditions.h"

@implementation NSAttributedString (Additions)

-(void) drawInRect:(NSRect) bounds withAlignment:(NSTextAlignment) alignment
{
    NSTextStorage* ts = [[[NSTextStorage alloc] initWithAttributedString:self] autorelease];
                                                
    NSLayoutManager* lm = [[[NSLayoutManager alloc] init] autorelease];
    NSTextContainer* tc = [[[NSTextContainer alloc] init] autorelease];
    [lm addTextContainer:tc];
    [ts addLayoutManager:lm];
    
    NSRange glyphRange = [lm glyphRangeForTextContainer:tc];
    NSRect usedBounds = [lm usedRectForTextContainer:tc];

    switch(alignment)
    {
        case NSRightTextAlignment:
            bounds.origin.x += NSWidth(bounds) - NSWidth(usedBounds);
            break;
        case NSCenterTextAlignment:
            bounds.origin.x += (NSWidth(bounds) - NSWidth(usedBounds)) / 2;
            break;
    }
    
    [lm drawGlyphsForGlyphRange:glyphRange atPoint:bounds.origin];
}

@end

@implementation NSString (Additions)

-(NSString*) urlEncoded
{
    NSString* result = (NSString*)CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)self, NULL, CFSTR("?=&+"), kCFStringEncodingUTF8);
    return [result autorelease];
}

-(NSAttributedString*) hyperlink
{
    NSDictionary* attrs = [NSDictionary dictionaryWithObjectsAndKeys:
            [NSNumber numberWithInt:NSSingleUnderlineStyle], NSUnderlineStyleAttributeName,
            self, NSLinkAttributeName,
            [NSColor colorWithCalibratedRed:0.1 green:0.1 blue:1.0 alpha:1.0], NSForegroundColorAttributeName,
            [NSCursor openHandCursor], NSCursorAttributeName,
            nil];
            
    return [[[NSAttributedString alloc] initWithString:self attributes:attrs] autorelease];
}

-(void) drawInRect:(NSRect) bounds withFont:(NSFont*) font color:(NSColor*) color alignment:(NSTextAlignment) alignment
{
    NSTextStorage* ts = [[[NSTextStorage alloc] initWithString:self attributes:[NSDictionary dictionaryWithObjectsAndKeys:
                                                font, NSFontAttributeName,
                                                color, NSForegroundColorAttributeName,
                                                nil]] autorelease];
                                                
    NSLayoutManager* lm = [[[NSLayoutManager alloc] init] autorelease];
    NSTextContainer* tc = [[[NSTextContainer alloc] init] autorelease];
    [lm addTextContainer:tc];
    [ts addLayoutManager:lm];
    
    NSRange glyphRange = [lm glyphRangeForTextContainer:tc];
    NSRect usedBounds = [lm usedRectForTextContainer:tc];

    switch(alignment)
    {
        case NSRightTextAlignment:
            bounds.origin.x += NSWidth(bounds) - NSWidth(usedBounds);
            break;
        case NSCenterTextAlignment:
            bounds.origin.x += (NSWidth(bounds) - NSWidth(usedBounds)) / 2;
            break;
    }
    
    [lm drawGlyphsForGlyphRange:glyphRange atPoint:bounds.origin];
}

@end
