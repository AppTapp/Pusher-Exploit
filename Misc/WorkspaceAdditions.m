/*!
 @source WorkspaceAdditions.m
 @project Pusher
 @author Alexander Maksimenko
 @copyright Copyright (c) 2009 Ripdev. All rights reserved.
 */

#import "WorkspaceAdditions.h"

@implementation NSWorkspace (Additions)

-(NSImage*) fullIconFromIconRef:(IconRef) iconRef
{
    NSImage *image = nil;
    IconFamilyHandle iconFamily = NULL;

    OSStatus err = IconRefToIconFamily(iconRef, kSelectorAllAvailableData, &iconFamily);

    if(err == noErr && iconFamily)
    {
        NSData *data = [NSData dataWithBytes:*iconFamily length:GetHandleSize((Handle)iconFamily)];

        image = [[[NSImage alloc] initWithData:data] autorelease];
        
        DisposeHandle((Handle)iconFamily);
    }
    
    return image;
}

-(NSImage*) fullIconForFile:(NSString*) fullPath
{
    const UInt8 *filePath = (const UInt8 *)[fullPath fileSystemRepresentation];

    if(!filePath)
        return nil;

    FSRef ref;
    Boolean isDir;
    OSStatus err = FSPathMakeRef(filePath, &ref, &isDir);

    if(err != noErr)
        return nil;

    SInt16 label;
    IconRef iconRef = nil;
    err = GetIconRefFromFileInfo(&ref, 0, NULL, kFSCatInfoNone, NULL, kIconServicesNormalUsageFlag, &iconRef, &label);

    if(err != noErr)
        return nil;

    NSImage *image = [self fullIconFromIconRef:iconRef];
    ReleaseIconRef(iconRef);

    return image;
}

-(NSImage*) fullIconForType:(OSType) iconType
{
    IconRef iconRef = NULL;
    NSImage *image = nil;

    OSStatus error = GetIconRef(kOnSystemDisk, kSystemIconsCreator, iconType, &iconRef);

    if(!error && iconRef)
    {
        image = [self fullIconFromIconRef:iconRef];
        ReleaseIconRef(iconRef);
    }

    return image;
}

-(NSImage*) fullIconForExtension:(NSString*) extension
{
    IconRef iconRef = NULL;
    NSImage *image = nil;

    OSStatus error = GetIconRefFromTypeInfo(0, 0, (CFStringRef)extension, 0, 0, &iconRef);

    if(!error && iconRef)
    {
        image = [self fullIconFromIconRef:iconRef];
        ReleaseIconRef(iconRef);
    }

    return image;
}

@end
