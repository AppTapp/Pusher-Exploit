/*!
 @source SupportClasses.m
 @project Pusher
 @author Alexander Maksimenko
 @copyright Copyright (c) 2009 Ripdev. All rights reserved.
 */

#import "SupportClasses.h"

@implementation MacOSVersion : NSObject

+(BOOL) is104OrLater
{
    SInt32 sys = 0;
    Gestalt(gestaltSystemVersion, &sys);

    return sys >= 0x1040;
}

+(BOOL) is105OrLater
{
    SInt32 sys = 0;
    Gestalt(gestaltSystemVersion, &sys);

    return sys >= 0x1050;
}

+(BOOL) is106OrLater
{
    SInt32 sys = 0;
    Gestalt(gestaltSystemVersion, &sys);

    return sys >= 0x1060;
}

@end

@implementation Drawing

+(NSSize) sizeForString:(NSString*) string withAttributes:(NSDictionary*) dict
{
    NSAttributedString* as = [[[NSAttributedString alloc] initWithString:string attributes:dict] autorelease];
    return [Drawing sizeForAttributedString:as];
}

+(NSSize) sizeForString:(NSString*) string withFont:(NSFont*) font
{
    return [Drawing sizeForString:string withAttributes:[NSDictionary dictionaryWithObject:font forKey:NSFontAttributeName]];
}

+(NSSize) sizeForAttributedString:(NSAttributedString*) as
{
    return [Drawing boundingRectForAttributedString:as withBounds:NSMakeSize(1e6, 1e6)].size;
}

+(float) heightForFont:(NSFont*) font
{
    return [Drawing sizeForString:@"0" withFont:font].height;
}

+(NSRect) boundingRectForAttributedString:(NSAttributedString*) as withBounds:(NSSize) boundsSize
{
	if(as == nil || [as length] == 0)
        return NSZeroRect;

	NSTextStorage* ts = [[[NSTextStorage alloc] initWithAttributedString:as] autorelease];
	NSTextContainer* tc = [[[NSTextContainer alloc] initWithContainerSize:NSMakeSize(boundsSize.width,1e6)] autorelease];
	NSLayoutManager* lm = [[[NSLayoutManager alloc] init] autorelease];

	[tc setLineFragmentPadding:1];
	[tc setWidthTracksTextView:NO];
	[tc setHeightTracksTextView:NO];
	[lm addTextContainer:tc];
	[lm setUsesScreenFonts:NO];
	[ts addLayoutManager:lm];

	[lm glyphRangeForTextContainer:tc];

    return [lm usedRectForTextContainer:tc];
}

@end